# MySQL微服务架构部署配置
# 适用于企业级用户，使用MySQL替代PostgreSQL
services:
  # 前端服务 - Vue应用 + Nginx
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: stock-scanner-frontend
    ports:
      - "3000:80"
    environment:
      - VITE_API_BASE_URL=http://backend:8888
      - VITE_APP_TITLE=Stock Scanner
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    networks:
      - stock-scanner-network

  # 后端服务 - Python FastAPI
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: stock-scanner-backend
    ports:
      - "8888:8888"
    environment:
      - API_KEY=${API_KEY:-}
      - API_URL=${API_URL:-}
      - API_MODEL=${API_MODEL:-}
      - API_TIMEOUT=${API_TIMEOUT:-30}
      - ANNOUNCEMENT_TEXT=${ANNOUNCEMENT_TEXT:-}
      - ENABLE_USER_SYSTEM=true
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-secret-key-change-in-production}
      - DATABASE_URL=mysql+pymysql://stock_user:stock_password@mysql:3306/stock_scanner
      - MYSQL_USER=stock_user
      - MYSQL_PASSWORD=stock_password
      - MYSQL_DATABASE=stock_scanner
    depends_on:
      mysql:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/api/config"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    networks:
      - stock-scanner-network

  # MySQL数据库
  mysql:
    image: mysql:8.0
    container_name: stock-scanner-mysql
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=root_password
      - MYSQL_DATABASE=stock_scanner
      - MYSQL_USER=stock_user
      - MYSQL_PASSWORD=stock_password
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init-scripts/02-init-mysql.sql:/docker-entrypoint-initdb.d/01-init-mysql.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "stock_user", "-pstock_password"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - stock-scanner-network

  # 反向代理 - 统一入口
  nginx:
    image: nginx:stable-alpine
    container_name: stock-scanner-nginx
    ports:
      - "80:80"
      # - "443:443"  # 启用SSL时取消注释
    volumes:
      - ./nginx/nginx.microservices.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/logs:/var/log/nginx
      # - ./nginx/ssl:/etc/nginx/ssl  # 启用SSL时取消注释
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    networks:
      - stock-scanner-network

networks:
  stock-scanner-network:
    driver: bridge

volumes:
  mysql_data:
    driver: local 