# 开发环境 Docker Compose 配置
# 支持代码目录挂载，无需重新构建镜像即可调试

services:
  app-dev:
    platform: linux/amd64
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: stock-scanner-app-dev
    ports:
      - "8888:8888"
    environment:
      - API_KEY=${API_KEY}
      - API_URL=${API_URL}
      - API_MODEL=${API_MODEL}
      - API_TIMEOUT=${API_TIMEOUT}
      - ANNOUNCEMENT_TEXT=${ANNOUNCEMENT_TEXT}
      # 用户系统配置
      - ENABLE_USER_SYSTEM=${ENABLE_USER_SYSTEM:-true}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - DATABASE_URL=mysql+pymysql://dev_user:dev_password@stock-scanner-mysql-dev:3306/stock_scanner_dev
      # 开发环境特定配置
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - DEBUG=true
      - LOG_LEVEL=DEBUG
    volumes:
      # 挂载源代码目录 - 核心功能
      - ./services:/app/services
      - ./utils:/app/utils
      - ./web_server.py:/app/web_server.py
      - ./requirements.txt:/app/requirements.txt
      - ./pyproject.toml:/app/pyproject.toml
      
      # 挂载前端代码（如果需要同时开发前端）
      - ./frontend:/app/frontend
      
      # 数据和日志持久化
      - ./logs:/app/logs
      - ./data:/app/data
      
      # 挂载测试目录
      - ./tests:/app/tests
    restart: unless-stopped
    command: 
      [
        "sh", "-c",
        "echo 'Installing/updating dependencies...' && pip install -r requirements.txt && echo 'Starting development server with hot reload...' && uvicorn web_server:app --host 0.0.0.0 --port 8888 --reload --reload-dir /app/services --reload-dir /app/utils --log-level debug"
      ]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/api/config"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - stock-scanner-dev-network

  # 可选：Redis for caching (开发环境)
  redis-dev:
    image: redis:7-alpine
    container_name: stock-scanner-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis-dev-data:/data
    networks:
      - stock-scanner-dev-network
    profiles:
      - redis

  # 可选：PostgreSQL for development (替代SQLite)
  postgres-dev:
    image: postgres:15-alpine
    container_name: stock-scanner-postgres-dev
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=stock_scanner_dev
      - POSTGRES_USER=dev_user
      - POSTGRES_PASSWORD=dev_password
    volumes:
      - postgres-dev-data:/var/lib/postgresql/data
    networks:
      - stock-scanner-dev-network
    profiles:
      - postgres

  # 可选：MySQL for development (替代SQLite)
  mysql-dev:
    image: mysql:8.0
    container_name: stock-scanner-mysql-dev
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=root_password
      - MYSQL_DATABASE=stock_scanner_dev
      - MYSQL_USER=dev_user
      - MYSQL_PASSWORD=dev_password
    volumes:
      - mysql-dev-data:/var/lib/mysql
      - ./init-scripts/02-init-mysql.sql:/docker-entrypoint-initdb.d/01-init-mysql.sql
    networks:
      - stock-scanner-dev-network
    profiles:
      - mysql

networks:
  stock-scanner-dev-network:
    driver: bridge

volumes:
  redis-dev-data:
  postgres-dev-data:
  mysql-dev-data: 